import {
  $NOW,
  TimescapeManager
} from "./chunk-L3U7FLDR.js";

// src/integrations/svelte.ts
import { derived, get } from "svelte/store";
import { onDestroy } from "svelte";
var createTimescape = (options) => {
  const manager = new TimescapeManager(get(options).date);
  manager.subscribe((nextDate) => {
    options.update((value) => ({ ...value, date: nextDate }));
  });
  options.subscribe((value) => {
    manager.minDate = value.minDate;
    manager.maxDate = value.maxDate;
    if (value.hour12 !== void 0)
      manager.hour12 = value.hour12;
    if (value.digits !== void 0)
      manager.digits = value.digits;
    if (value.wrapAround !== void 0)
      manager.wrapAround = value.wrapAround;
  });
  const date = derived(options, ($options) => $options.date);
  date.subscribe((value) => {
    manager.updateDate(value?.getTime());
  });
  const inputProps = (element, type) => manager.registerElement(element, type);
  const rootProps = (element) => manager.registerRoot(element);
  onDestroy(() => manager.remove());
  return {
    inputProps,
    rootProps
  };
};
export {
  $NOW as NOW,
  createTimescape
};
