type DateType = 'days' | 'months' | 'years' | 'hours' | 'minutes' | 'seconds' | 'am/pm';
declare const $NOW: "$NOW";
type $NOW = typeof $NOW;
type Options = {
    minDate?: Date | $NOW;
    maxDate?: Date | $NOW;
    hour12?: boolean;
    digits?: 'numeric' | '2-digit';
    wrapAround?: boolean;
};
declare class TimescapeManager implements Options {
    #private;
    minDate?: Options['minDate'];
    maxDate?: Options['maxDate'];
    hour12?: Options['hour12'];
    digits?: Options['digits'];
    wrapAround?: Options['wrapAround'];
    get date(): Date | undefined;
    set date(nextDate: Date | number | string | undefined);
    constructor(initialDate?: Date, options?: Options);
    updateDate(timestamp: Date | number | string | undefined): void;
    resync(): void;
    subscribe(callback: (timestamp: Date | undefined) => void): void;
    registerRoot(element: HTMLElement): void;
    registerElement(element: HTMLInputElement, type: DateType, autofocus?: boolean, domExists?: boolean): HTMLInputElement | undefined;
    remove(): void;
    focusField(which?: DateType | number): void;
}

export { $NOW, DateType, Options, TimescapeManager, TimescapeManager as default };
