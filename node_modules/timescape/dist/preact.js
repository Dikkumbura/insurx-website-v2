import {
  $NOW,
  TimescapeManager
} from "./chunk-L3U7FLDR.js";

// src/integrations/preact.ts
import { useEffect, useState } from "preact/hooks";
import { effect } from "@preact/signals";
var useTimescape = (options) => {
  const [manager] = useState(() => new TimescapeManager(options.value.date));
  manager.subscribe((nextDate) => {
    options.value = { ...options.value, date: nextDate };
  });
  effect(() => {
    manager.date = options.value.date;
    manager.minDate = options.value.minDate;
    manager.maxDate = options.value.maxDate;
    if (options.value.digits !== void 0)
      manager.hour12 = options.value.hour12;
    if (options.value.digits !== void 0)
      manager.digits = options.value.digits;
    if (options.value.wrapAround !== void 0)
      manager.wrapAround = options.value.wrapAround;
  });
  useEffect(() => () => manager.remove(), [manager]);
  return {
    getInputProps: (type, opts) => ({
      ref: (element) => {
        if (element) {
          manager.registerElement(element, type, opts?.autofocus);
          if (opts?.ref)
            opts.ref.current = element;
        }
      }
    }),
    getRootProps: () => ({
      ref: (element) => element && manager.registerRoot(element)
    })
  };
};
export {
  $NOW,
  useTimescape
};
