import {
  $NOW,
  TimescapeManager
} from "./chunk-L3U7FLDR.js";

// src/integrations/react.ts
import {
  useEffect,
  useRef,
  useLayoutEffect
} from "react";
var useTimescape = ({
  date,
  minDate,
  maxDate,
  hour12 = false,
  wrapAround = false,
  digits = "2-digit",
  onChangeDate
}) => {
  const manager = useRef(new TimescapeManager(date));
  const timestamp = date?.getTime();
  const onChangeDateRef = useRef(onChangeDate);
  useLayoutEffect(() => {
    onChangeDateRef.current = onChangeDate;
  }, [onChangeDate]);
  useEffect(() => {
    manager.current.resync();
    return () => {
      manager.current.remove();
    };
  }, []);
  useEffect(() => {
    if (!manager.current)
      return;
    manager.current.date = timestamp;
  }, [timestamp]);
  useEffect(() => {
    manager.current?.subscribe((nextDate) => {
      onChangeDateRef.current?.(nextDate);
    });
  }, []);
  useEffect(() => {
    if (!manager.current)
      return;
    manager.current.minDate = minDate;
    manager.current.maxDate = maxDate;
    if (hour12 !== void 0)
      manager.current.hour12 = hour12;
    if (wrapAround !== void 0)
      manager.current.wrapAround = wrapAround;
    if (digits !== void 0)
      manager.current.digits = digits;
  }, [minDate, maxDate, hour12, wrapAround, digits]);
  return {
    getInputProps: (type, opts) => ({
      ref: (element) => {
        if (element) {
          manager.current?.registerElement(element, type, opts?.autofocus);
          if (opts?.ref)
            opts.ref.current = element;
        }
      }
    }),
    getRootProps: () => ({
      ref: (element) => element && manager.current?.registerRoot(element)
    })
  };
};
export {
  $NOW,
  useTimescape
};
